Date:-03/09/2021
Functions:-

=====================USER DEFINED FUNCTIONS======================
*****CREATE USER DEFINED FUNCTIONS*****
CREATE FUNCTION sales.udfNetSale(
    @quantity INT,
    @list_price DEC(10,2),
    @discount DEC(4,2)
)
RETURNS DEC(10,2)
AS 
BEGIN
    RETURN @quantity * @list_price * (1 - @discount);
END;

*****DROP FUNCTIONS*****
DROP FUNCTION IF EXISTS sales.udfNetSale;

*****AGGREGATE FUNCTIONS*****
1.AVG()
SELECT
    AVG(list_price) avg_product_price
FROM
    production.products;

2.COUNT()
SELECT
    COUNT(*) product_count
FROM
    production.products
WHERE
    list_price > 500;

3.MAX()
SELECT
    MAX(list_price) max_list_price
FROM
    production.products;

4.MIN()
SELECT
    MIN(list_price) min_list_price
FROM
    production.products;   

5.SUM()
SELECT 
    product_id, 
    SUM(quantity) stock_count
FROM 
    production.stocks
GROUP BY
    product_id
ORDER BY 
    stock_count DESC;

6.STDEV()
SELECT
    CAST(ROUND(STDEV(list_price),2) as DEC(10,2)) stdev_list_price
FROM
    production.products;

*****WINDOW FUNCTIONS*****
1.CUME_DIST()
SELECT 
    CONCAT_WS(' ',first_name,last_name) full_name,
    net_sales, 
    CUME_DIST() OVER (
        ORDER BY net_sales DESC
    ) cume_dist
FROM 
    sales.vw_staff_sales t
INNER JOIN sales.staffs m on m.staff_id = t.staff_id
WHERE 
    year = 2017;

2.DENSE_RANK()
SELECT
	product_id,
	product_name,
	list_price,
	DENSE_RANK () OVER ( 
		ORDER BY list_price DESC
	) price_rank 
FROM
	production.products;

3.FIRST_VALUE()
SELECT 
    category_name,
    year,
    qty,
    FIRST_VALUE(category_name) OVER(
        ORDER BY qty
    ) lowest_sales_volume
FROM 
    sales.vw_category_sales_volume
WHERE
    year = 2017;

4.LAST_VALUE()
SELECT 
    category_name,
    year,
    qty,
    LAST_VALUE(category_name) OVER(
        ORDER BY qty
         RANGE BETWEEN 
            UNBOUNDED PRECEDING AND 
            UNBOUNDED FOLLOWING
    ) highest_sales_volume
FROM 
    sales.vw_category_sales_volume
WHERE
    year = 2016;

5.LAG()
WITH cte_netsales_2018 AS(
	SELECT 
		month, 
		SUM(net_sales) net_sales
	FROM 
		sales.vw_netsales_brands
	WHERE 
		year = 2018
	GROUP BY 
		month
)
SELECT 
	month,
	net_sales,
	LAG(net_sales,1) OVER (
		ORDER BY month
	) previous_month_sales
FROM 
	cte_netsales_2018;

6.LEAD()
CREATE VIEW sales.vw_netsales_brands
AS
	SELECT 
		c.brand_name, 
		MONTH(o.order_date) month, 
		YEAR(o.order_date) year, 
		CONVERT(DEC(10, 0), SUM((i.list_price * i.quantity) * (1 - i.discount))) AS net_sales
	FROM sales.orders AS o
		INNER JOIN sales.order_items AS i ON i.order_id = o.order_id
		INNER JOIN production.products AS p ON p.product_id = i.product_id
		INNER JOIN production.brands AS c ON c.brand_id = p.brand_id
	GROUP BY c.brand_name, 
			MONTH(o.order_date), 
			YEAR(o.order_date);
WITH cte_netsales_2017 AS(
	SELECT 
		month, 
		SUM(net_sales) net_sales
	FROM 
		sales.vw_netsales_brands
	WHERE 
		year = 2017
	GROUP BY 
		month
)
SELECT 
	month,
	net_sales,
	LEAD(net_sales,1) OVER (
		ORDER BY month
	) next_month_sales
FROM 
	cte_netsales_2017;

*****DATE FUNCTIONS*****
1.CURRENT_TIMESTAMP
SELECT 
    CURRENT_TIMESTAMP AS current_date_time;

2.DATEADD()
SELECT 
    DATEADD(second, 1, '2018-12-31 23:59:59') result;

3.DATEDIFF() 
DECLARE 
    @start_dt DATETIME2= '2019-12-31 23:59:59.9999999', 
    @end_dt DATETIME2= '2020-01-01 00:00:00.0000000';

SELECT 
    DATEDIFF(year, @start_dt, @end_dt) diff_in_year, 
    DATEDIFF(quarter, @start_dt, @end_dt) diff_in_quarter, 
    DATEDIFF(month, @start_dt, @end_dt) diff_in_month, 
    DATEDIFF(dayofyear, @start_dt, @end_dt) diff_in_dayofyear, 
    DATEDIFF(day, @start_dt, @end_dt) diff_in_day, 
    DATEDIFF(week, @start_dt, @end_dt) diff_in_week, 
    DATEDIFF(hour, @start_dt, @end_dt) diff_in_hour, 
    DATEDIFF(minute, @start_dt, @end_dt) diff_in_minute, 
    DATEDIFF(second, @start_dt, @end_dt) diff_in_second, 
    DATEDIFF(millisecond, @start_dt, @end_dt) diff_in_millisecond;

SELECT
    order_id, 
    required_date, 
    shipped_date,
    CASE
        WHEN DATEDIFF(day, required_date, shipped_date) < 0
        THEN 'Late'
        ELSE 'OnTime'
    END shipment
FROM 
    sales.orders
WHERE 
    shipped_date IS NOT NULL
ORDER BY 
    required_date;

4.DATEPART()
DECLARE @d DATETIME = '2019-01-01 14:30:14';
SELECT 
   DATEPART(year, @d) year, 
   DATEPART(quarter, @d) quarter, 
   DATEPART(month, @d) month, 
   DATEPART(day, @d) day, 
   DATEPART(hour, @d) hour, 
   DATEPART(minute, @d) minute, 
   DATEPART(second, @d) second;

5.DATENAME()
SELECT
    DATEPART(year, '2018-05-10') [datepart], 
    DATENAME(year, '2018-05-10') [datename];

6.DATEFROMPARTS()
SELECT 
    DATEFROMPARTS(2020,12,31) a_date;

7.DATETIME2FROMPARTS()
SELECT 
    DATETIME2FROMPARTS ( 2020, 12, 31, 11, 59, 59, 0, 0 ) result;  

8.ISDATE() 
SELECT 
    ISDATE('2020-06-15') is_date

*****STRING FUNCTIONS*****
1.ASCII()
SELECT 
    ASCII('AB') A, 
    ASCII('Z') Z;

2.CHARINDEX()
SELECT 
    CHARINDEX('SQL', 'SQL Server CHARINDEX') position;

3.SOUNDEX
SELECT 
    SOUNDEX('Too') Too, 
    SOUNDEX('Two') Two;

4.CONCAT()
SELECT 
    customer_id,
    first_name,
    last_name,
    CONCAT(first_name, ' ', last_name) full_name
FROM 
    sales.customers
ORDER BY 
    full_name;

5.CHAR()
SELECT 
    CHAR(65) char_65, 
    CHAR(90) char_90;

7.LEN()
SELECT
    LEN('SQL Server LEN') length,
    LEN('SQL Server LEN   ') length_with_trailing_blanks;

8.LOWER()
SELECT 
    LOWER('TEST') result;

9.REPLACE()
SELECT 
    REPLACE(
        'It is a good tea at the famous tea store.', 
        'tea', 
        'coffee'
    ) result;

10.REVERSE()
SELECT 
    REVERSE('ecnalubma') result;

11.SUBSTRING()
SELECT 
    SUBSTRING('SQL Server SUBSTRING', 5, 6) result;

*****SYSTEM FUNCTIONS*****
1.CAST()
SELECT CAST(5.95 AS INT) result;

2.CONVERT()
SELECT CONVERT(INT, 9.95) result;

3.IFF()
SELECT 
    IIF(10 < 20, 'True', 'False') Result ;

4.CHOOSE()
SELECT 
    CHOOSE(2, 'First', 'Second', 'Third') Result;

5.TRY PARSE()
SELECT 
    TRY_PARSE('14 April 2019' AS date) result;
